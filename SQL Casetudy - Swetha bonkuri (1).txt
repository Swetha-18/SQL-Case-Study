SQL Case Study on database scenario for a fictional company called "TechMart," 




THE SQL CODE TO IMPORT DUMMY TABLES TO SOLVE THE QUESTIONS ARE LISTED BELOW


-- Create the 'categories' table
CREATE TABLE categories (
  category_id INT PRIMARY KEY,
  category_name VARCHAR(50));


-- Insert data into the 'categories' table
INSERT INTO categories (category_id, category_name) VALUES
(1, 'Laptops'),
(2, 'Smartphones'),
(3, 'Tablets'),
(4, 'Accessories'),
(5, 'Cameras');




-- Create the 'products' table
CREATE TABLE products1 (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(100),
  category_id INT,
  unit_price DECIMAL(10, 2),
  stock_quantity INT);


-- Insert data into the 'products' table
INSERT INTO products (product_id, product_name, category_id, unit_price, stock_quantity) VALUES
(101, 'Dell XPS 13', 1, 1200.00, 50),
(102, 'iPhone 12', 2, 999.99, 100),
(103, 'Samsung Galaxy S21', 2, 899.00, 80),
(104, 'iPad Pro', 3, 799.00, 60),
(105, 'Logitech Wireless Mouse', 4, 29.99, 200),
(106, 'JBL Bluetooth Speaker', 4, 89.99, 150),
(107, 'Nikon D850 DSLR Camera', 5, 2499.00, 30),
(108, 'Sony Alpha A7 III', 5, 1999.00, 40);


-- Create the 'orders' table
CREATE TABLE orders1 (
  order_id INT PRIMARY KEY,
  customer_id INT,
  order_date DATE);


-- Insert data into the 'orders' table
INSERT INTO orders1 (order_id, customer_id, order_date) VALUES
(1001, 5001, '2023-07-01'),
(1002, 5002, '2023-07-15'),
(1003, 5001, '2023-07-20'),
(1004, 5003, '2023-07-22'),
(1005, 5004, '2023-07-25');


-- Create the 'order_items' table
CREATE TABLE order_items (
  order_item_id INT PRIMARY KEY,
  order_id INT,
  product_id INT,
  quantity INT,
  total_price DECIMAL(10, 2)
);


-- Insert data into the 'order_items' table
INSERT INTO order_items (order_item_id, order_id, product_id, quantity, total_price) VALUES
(2001, 1001, 101, 2, 2400.00),
(2002, 1001, 102, 1, 999.99),
(2003, 1002, 104, 3, 2397.00),
(2004, 1003, 103, 2, 1798.00),
(2005, 1003, 105, 5, 149.95),
(2006, 1003, 106, 2, 179.98),
(2007, 1004, 107, 1, 2499.00),
(2008, 1004, 106, 3, 269.97),
(2009, 1005, 102, 2, 1999.98),
(2010, 1005, 108, 1, 1999.00),
(2011, 1005, 105, 2, 59.98),
(2012, 1005, 103, 1, 899.00);




select * from Products1
select * from categories
select * from orders1
select * from order_items


**Case Study Challenges:**


**1. Retrieve Product Information: (Medium)**
Write a SQL query to retrieve the product_id, product_name, unit_price, and stock_quantity for all products in the "Laptops" category.


 -- This query retrieves the product_id, product_name, unit_price, and stock_quantity for all products in the "Laptops" category.
SELECT product_id, product_name, unit_price, stock_quantity
FROM products
WHERE category_id = 1;








**2. Top Selling Categories: (Medium)**
Write a SQL query to determine the top 3 product categories based on the total quantity of products sold. The result should include the category_id, category_name, and the total quantity sold across all orders.


-- This query calculates the total quantity sold for each product category and then orders the results in descending order, limiting the results to the top 3 product categories.
SELECT TOP 3 p.category_id, c.category_name, SUM(oi.quantity) AS total_quantity_sold
FROM order_items oi
INNER JOIN products1 p ON oi.product_id = p.product_id
INNER JOIN categories c ON p.category_id = c.category_id
GROUP BY p.category_id, c.category_name
ORDER BY total_quantity_sold DESC;






**3. Customer Purchase History: (Medium)**
Write a SQL query that shows the order_id, order_date, product_id, product_name, and quantity for each product purchased by a specific customer with customer_id = 1001.


-- This query joins the orders, order_items, and products tables to retrieve the order_id, order_date, product_id, product_name, and quantity for each product purchased by the customer with customer_id = 1001.
SELECT o.order_id, o.order_date, p.product_id, p.product_name, oi.quantity
FROM orders1 o
INNER JOIN order_items oi ON o.order_id = oi.order_id
INNER JOIN products1 p ON oi.product_id = p.product_id
WHERE o.customer_id = 1001;








**4. Revenue by Category: (Advanced)**
Write a SQL query to calculate the total revenue generated by each product category, considering the unit price and quantity sold for each product. The result should display the category_id, category_name, and total revenue.


-- This query calculates the total revenue generated by each product category by multiplying the quantity sold by the unit price for each product. The results are then ordered in descending order by total revenue.
SELECT c.category_id, c.category_name, SUM(oi.quantity * p.unit_price) AS total_revenue
FROM order_items oi
INNER JOIN products1 p ON oi.product_id = p.product_id
INNER JOIN categories c ON p.category_id = c.category_id
GROUP BY c.category_id, c.category_name
ORDER BY total_revenue DESC;






**5. Monthly Sales Growth: (Advanced)**
Write an SQL query to calculate the monthly sales growth percentage for TechMart. The result should include the month and year of the orders and the corresponding sales growth percentage compared to the previous month.


-- This query calculates the total sales for each month and then calculates the monthly sales growth percentage by comparing the current month's sales to the previous month's sales using the LAG function.
SELECT
    YEAR(o1.order_date) AS year,
    MONTH(o1.order_date) AS month,
    SUM(oi.quantity * p1.unit_price) AS total_sales,
    (SUM(oi.quantity * p1.unit_price) /
     LAG(SUM(oi.quantity * p1.unit_price), 1) OVER (ORDER BY YEAR(o1.order_date), MONTH(o1.order_date))) * 100 AS sales_growth_percentage
FROM order_items oi
INNER JOIN products1 p1 ON oi.product_id = p1.product_id
INNER JOIN orders1 o1 ON oi.order_id = o1.order_id
GROUP BY YEAR(o1.order_date), MONTH(o1.order_date)
ORDER BY YEAR(o1.order_date), MONTH(o1.order_date);








**6. Rank Customers by Total Spending: (Advanced)**
Write a SQL query to rank TechMart's customers based on their total spending (sum of total_price) in descending order. The result should display the customer_id and their respective rank.


-- This query calculates the total spending for each customer and then ranks the customers in descending order by total spending using the DENSE_RANK function.
SELECT o1.customer_id, SUM(oi.total_price) AS total_spending, DENSE_RANK() OVER (ORDER BY SUM(oi.total_price) DESC) AS rank
FROM order_items oi
INNER JOIN orders1 o1 ON oi.order_id = o1.order_id
GROUP BY o1.customer_id
ORDER BY total_spending DESC;


**7. Product Recommendations: (Advanced)**
Write a SQL query that suggests three product recommendations to customers who have purchased products in the "Smartphones" category. The recommendations should be based on the purchasing history of other customers who bought products from the same category.


-- This query retrieves the product_id for the top 3 products purchased by other customers who have purchased products in the "Smartphones" category.
SELECT TOP 3 oi.product_id
FROM order_items oi
INNER JOIN orders1 o1 ON oi.order_id = o1.order_id
WHERE o1.customer_id <> 1001
AND oi.product_id IN (
    SELECT TOP 3 oi2.product_id
    FROM order_items oi2
    INNER JOIN orders1 o2 ON oi2.order_id = o2.order_id
    WHERE o2.customer_id <> 1001
    AND oi2.product_id IN (
        SELECT product_id
        FROM products1
        WHERE category_id = 2
    )
    GROUP BY oi2.product_id
    ORDER BY SUM(oi2.quantity) DESC
);




1. category_id, category_name, product_id, product_name for rows with highest total_price for each category
-- This query retrieves the category_id, category_name, product_id, and product_name for rows with the highest total_price in each category.
WITH RankedProducts AS (
  SELECT c.category_id, c.category_name, p.product_id, p.product_name, oi.total_price,
    ROW_NUMBER() OVER (PARTITION BY c.category_id ORDER BY oi.total_price DESC) AS RowRank
  FROM categories c
  JOIN products1 p ON c.category_id = p.category_id
  JOIN order_items oi ON p.product_id = oi.product_id
)
SELECT category_id, category_name, product_id, product_name
FROM RankedProducts
WHERE RowRank = 1;


2. order_id, order_date and order date of previous order.
-- This query retrieves the order_id, order_date, and the order date of the previous order.
WITH OrderedOrders AS (
  SELECT order_id, order_date,
    LAG(order_date, 1) OVER (ORDER BY order_date) AS previous_order_date
  FROM orders1
)
SELECT order_id, order_date, previous_order_date
FROM OrderedOrders;




3. All the rows from the order_items table where the percentage of the price for that product kind is at least 50% for its order_id.
-- This query retrieves all the rows from the order_items table where the percentage of the price for each product is at least 50% for its order_id.
SELECT oi.*
FROM order_items oi
WHERE (oi.total_price / (SELECT SUM(total_price) FROM order_items WHERE order_id = oi.order_id)) >= 0.5;




4. category_name, category_id, stock quantity for each category and sum price of all the units in stock for each category.
-- This query retrieves the category_name, category_id, stock quantity, and the sum of the price of all units in stock for each category.
SELECT c.category_id, c.category_name, SUM(p.stock_quantity) AS stock_quantity,
  SUM(p.unit_price * p.stock_quantity) AS total_price
FROM categories c
LEFT JOIN products1 p ON c.category_id = p.category_id
GROUP BY c.category_id, c.category_name;




5. Ordered list of category_id and category_name and total revenue generated by each category.
-- This query retrieves an ordered list of category_id, category_name, and the total revenue generated by each category.
SELECT c.category_id, c.category_name, SUM(oi.quantity * p.unit_price) AS total_revenue
FROM categories c
LEFT JOIN products1 p ON c.category_id = p.category_id
LEFT JOIN order_items oi ON p.product_id = oi.product_id
GROUP BY c.category_id, c.category_name
ORDER BY total_revenue DESC;